from typing import *
from lexer.token import Token
from lexer.tokens import TokenType
from syntax.ast import *

class ParserABC():
    def parse(self) -> Program: ...
    def consume(self, token_type: TokenType) -> Token: ...
    def current(self) -> Token: ...
    def is_eof(self) -> bool: ...

class StatementParserABC():
    def parse_statements(self) -> List[Statement]: ...
    def parse_statement(self) -> Statement: ...
    def parse_expression_statement(self) -> ExpressionStatement: ...
    def parse_variable_declaration(self) -> VariableDeclaration: ...
    def parse_block_statement(self) -> BlockStatement: ...
    def parse_if_statement(self) -> IfStatement: ...
    def parse_while_statement(self) -> WhileStatement: ...
    def parse_range_statement(self) -> RangeStatement: ...
    def parse_each_statement(self) -> EachStatement: ...
    def parse_return_statement(self) -> ReturnStatement: ...
    def parse_function_declaration(self) -> FunctionDeclaration: ...
    def parse_echo_statement(self) -> EchoStatement: ...

class ExpressionParserABC():
    def parse_expression(self) -> Expression: ...
    def parse_assignment_expression(self) -> Expression: ...
    def parse_binary_expression(self, precedence: int = 0) -> Expression: ...
    def parse_unary_expression(self) -> Expression: ...
    def parse_primary_expression(self) -> Expression: ...
    def parse_identifier_expression(self) -> Expression: ...
    def parse_call_expression(self, callee: Identifier) -> CallExpression: ...
    def parse_arguments(self) -> List[Expression]: ...
